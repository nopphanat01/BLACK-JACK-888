#include <iostream>
#include <cstdlib>
#include <ctime>
#include <fstream>

using namespace std;

void startGame();
void dealInitialCards(int &playerScore, int &dealerScore);
void playerTurn(int &playerScore);
void dealerTurn(int &dealerScore);
bool askToPlayAgain();
void printStats(int wins, int losses, int ties);
void loadStats(int &wins, int &losses, int &ties);
void saveStats(int wins, int losses, int ties);

int main() {
    srand(time(0)); //‡∏™‡∏∏‡πà‡∏°
    bool playing = true;

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    int wins = 0;
    int losses = 0;
    int ties = 0;

    // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    loadStats(wins, losses, ties);

    while (playing) { 
        int playerScore = 0;
        int dealerScore = 0;

        startGame(); 

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        dealInitialCards(playerScore, dealerScore);
        playerTurn(playerScore); 
        dealerTurn(dealerScore); 

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡πÅ‡∏û‡πâ‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        if (playerScore > 21) {
            cout << "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ! ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 21!" << endl;
            losses++;
        } else if (dealerScore > 21) {
            cout << "‡∏î‡∏µ‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå‡πÅ‡∏û‡πâ! ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 21!" << endl;
            wins++;
        } else if (playerScore > dealerScore) {
            cout << "‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!" << endl;
            wins++;
        } else if (playerScore < dealerScore) {
            cout << "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ!" << endl;
            losses++;
        } else {
            cout << "‡πÄ‡∏™‡∏°‡∏≠!" << endl;
            ties++;
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏°
        printStats(wins, losses, ties);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        saveStats(wins, losses, ties);

        // ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°
        playing = askToPlayAgain(); 
    }

    cout << "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô Blackjack!" << endl;
    return 0;
}

void startGame() {
    cout << "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏Å‡∏° Blackjack!" << endl;
}

bool askToPlayAgain() {
    char choice;
    cout << "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (Y/N)? ";
    cin >> choice;
    return (choice == 'Y' || choice == 'y');
}

void printStats(int wins, int losses, int ties) {
    cout << "\n--- ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô ---" << endl;
    cout << "‡∏ä‡∏ô‡∏∞: " << wins << " ‡πÄ‡∏Å‡∏°" << endl;
    cout << "‡πÅ‡∏û‡πâ: " << losses << " ‡πÄ‡∏Å‡∏°" << endl;
    cout << "‡πÄ‡∏™‡∏°‡∏≠: " << ties << " ‡πÄ‡∏Å‡∏°" << endl;
    cout << "----------------------\n" << endl;
}

void loadStats(int &wins, int &losses, int &ties) {
    ifstream inputFile("stats.txt");

    if (inputFile.is_open()) {
        inputFile >> wins >> losses >> ties;
        inputFile.close();
    } else {
        cout << "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà..." << endl;
    }
}

void saveStats(int wins, int losses, int ties) {
    ofstream outputFile("stats.txt");

    if (outputFile.is_open()) {
        outputFile << wins << endl;
        outputFile << losses << endl;
        outputFile << ties << endl;
        outputFile.close();
    } else {
        cout << "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ!" << endl;
    }

}

//‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2 ‡∏à‡πâ‡∏≤

void updateStreak(int &streak, int &balance, bool win) {
    if (win) {
        streak = (streak >= 0) ? streak + 1 : 1; // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô streak ‡πÄ‡∏û‡∏¥‡πà‡∏°, ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÅ‡∏û‡πâ‡∏°‡∏≤ reset ‡πÄ‡∏õ‡πá‡∏ô 1
        if (streak == 3) {
            balance += 150; // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ä‡∏ô‡∏∞ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏¥‡∏î
            cout << "üî• Streak Bonus! You won 3 times in a row! +$150 üî•" << endl;
        }
    } else {
        streak = (streak <= 0) ? streak - 1 : -1; // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏û‡πâ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô streak ‡∏•‡∏î, ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ä‡∏ô‡∏∞‡∏°‡∏≤ reset ‡πÄ‡∏õ‡πá‡∏ô -1
        if (streak == -3) {
            balance += 50; // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏õ‡∏•‡∏≠‡∏ö‡πÉ‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πâ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏¥‡∏î
            cout << "üíÄ Consolation Bonus! You lost 3 times in a row! +$50 üíÄ" << endl;
        }
    }
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
void useBlockCard(vector<string>& playerHand, bool& dealerCanDraw, bool& canDoubleDown, bool& canSplit) {
    string input;
    cout << "You have a Block Card! Would you like to block the dealer's next action?" << endl;
    cout << "Enter 'h' to block Dealer's next hit, 'd' to block Double Down, 's' to block Split: ";
    cin >> input;
    
    if (input == "h") {
        dealerCanDraw = false; // ‡∏´‡πâ‡∏≤‡∏°‡∏î‡∏µ‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå‡∏à‡∏±‡πà‡∏ß‡πÑ‡∏û‡πà
        cout << "Dealer's next hit is blocked!" << endl;
    } else if (input == "d") {
        canDoubleDown = false; // ‡∏´‡πâ‡∏≤‡∏° Double Down
        cout << "Double Down is blocked!" << endl;
    } else if (input == "s") {
        canSplit = false; // ‡∏´‡πâ‡∏≤‡∏° Split
        cout << "Split is blocked!" << endl;
    } else {
        cout << "Invalid input." << endl;
    }
}

